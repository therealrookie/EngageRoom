"use strict";
// Copyright (C) 2022 to the present, Crestron Electronics, Inc.
// All rights reserved.
// No part of this software may be reproduced in any form, machine
// or natural, without the express written consent of Crestron Electronics.
// Use of this source code is subject to the terms of the Crestron Software License Agreement
// under which you licensed this source code.
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Ch5UpdateProjectCli = void 0;
var Ch5BaseClassForCliNew_1 = require("../Ch5BaseClassForCliNew");
var Ch5DeleteComponentsCli_1 = require("../delete-components/Ch5DeleteComponentsCli");
var Ch5ExportProjectCli_1 = require("../export-project/Ch5ExportProjectCli");
var Ch5GeneratePageCli_1 = require("../generate-page/Ch5GeneratePageCli");
var Ch5GenerateWidgetCli_1 = require("../generate-widget/Ch5GenerateWidgetCli");
var path = require('path');
var fsExtra = require("fs-extra");
var Ch5UpdateProjectCli = /** @class */ (function (_super) {
    __extends(Ch5UpdateProjectCli, _super);
    /**
     * Constructor
     */
    function Ch5UpdateProjectCli(showOutputMessages) {
        if (showOutputMessages === void 0) { showOutputMessages = true; }
        var _this = _super.call(this, "update-project") || this;
        _this.showOutputMessages = showOutputMessages;
        _this.SHELL_FOLDER = path.normalize(path.join(__dirname, "../../", "shell"));
        _this.PROJECT_CONFIG_JSON_PATH = path.normalize("./app/project-config.json");
        _this.VSCODE_SCHEMA_JSON_PATH = path.normalize(path.join(".vscode", "project-config-schema.json"));
        return _this;
    }
    /**
     * Initialize process
     */
    Ch5UpdateProjectCli.prototype.initialize = function () {
        return __awaiter(this, void 0, void 0, function () {
            var getAllThemeNames;
            return __generator(this, function (_a) {
                this.logger.start("initialize");
                this.outputResponse.data.updateInputs = [];
                this.outputResponse.data.projectName = "";
                this.outputResponse.data.backupFolder = "";
                if (this.inputArgs["config"].argsValue !== "") {
                    // Do nothing
                }
                else {
                    getAllThemeNames = this.projectConfig.getAllThemeNames();
                    if (this.inputArgs["selectedTheme"]) {
                        this.inputArgs["selectedTheme"].allowedValues = getAllThemeNames;
                        this.inputArgs["selectedTheme"].allowedAliases = getAllThemeNames;
                    }
                }
                this.logger.end();
                return [2 /*return*/];
            });
        });
    };
    /**
     * Verify input parameters
     */
    Ch5UpdateProjectCli.prototype.verifyInputParams = function () {
        return __awaiter(this, void 0, void 0, function () {
            var tabDisplayText, warningMessage, i;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.logger.start("verifyInputParams");
                        return [4 /*yield*/, this.isConfigFileValid(this.PROJECT_CONFIG_JSON_PATH, path.join(this.SHELL_FOLDER, this.VSCODE_SCHEMA_JSON_PATH))];
                    case 1:
                        // Step 0: Check if json in the project to be updated is valid or not
                        if (!(_a.sent())) {
                            throw new Error(this.getText("VERIFY_INPUT_PARAMS.INVALID_PROJECT_CONFIG_JSON"));
                        }
                        if (!(this.inputArgs["config"].argsValue !== "")) return [3 /*break*/, 3];
                        // Step 1: Check file extension for json, valid input for 'config' argument, and config file existence
                        if (!(this.utils.isValidInput(this.inputArgs["config"].argsValue) && this.isConfigFileExist(this.inputArgs["config"].argsValue))) {
                            throw new Error(this.getText("VERIFY_INPUT_PARAMS.INVALID_CONFIG_INPUT"));
                        }
                        return [4 /*yield*/, this.isConfigFileValid(this.inputArgs["config"].argsValue, path.join(this.SHELL_FOLDER, this.VSCODE_SCHEMA_JSON_PATH), true)];
                    case 2:
                        // Step 2: Check if json is as per its schema (.vscode is hidden folder)
                        if (!(_a.sent())) {
                            throw new Error(this.getText("VERIFY_INPUT_PARAMS.INVALID_CONFIG_FILE"));
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        this.logger.log("Update project without json file");
                        Object.entries(this.inputArgs).forEach(function (_a) {
                            var key = _a[0], value = _a[1];
                            if (value.isSpecialArgument === false) {
                                var inputUpdate = __assign(__assign({}, value), { "warning": "" });
                                if (value.inputReceived === true) {
                                    if (_this.utils.isValidInput(value.argsValue)) {
                                        var validationResponse = _this.validateCLIInputArgument(value, value.key, value.argsValue, _this.getText("VERIFY_INPUT_PARAMS.INVALID_INPUT", value.key));
                                        _this.logger.log("validationResponse", validationResponse);
                                        if (validationResponse.warning === "") {
                                            inputUpdate.argsValue = validationResponse.value;
                                        }
                                        else {
                                            inputUpdate.argsValue = null;
                                            inputUpdate.warning = validationResponse.warning;
                                        }
                                    }
                                    _this.outputResponse.data.updateInputs.push(inputUpdate);
                                }
                            }
                        });
                        this.logger.log("this.outputResponse.data.updateInputs: ", this.outputResponse.data.updateInputs);
                        // To Check if atleast 1 input is provided
                        if (this.outputResponse.data.updateInputs.length === 0) {
                            throw new Error(this.getText("VERIFY_INPUT_PARAMS.MISSING_INPUTS_NEED_ATlEAST_ONE_DATA"));
                        }
                        tabDisplayText = this.getText("COMMON.HYPHEN_DELIMITER");
                        warningMessage = "";
                        for (i = 0; i < this.outputResponse.data.updateInputs.length; i++) {
                            if (this.utils.isValidInput(this.outputResponse.data.updateInputs[i].warning)) {
                                warningMessage += tabDisplayText + this.outputResponse.data.updateInputs[i].key + ": " + this.outputResponse.data.updateInputs[i].warning;
                            }
                        }
                        if (warningMessage !== "") {
                            if (this.showOutputMessages === true) {
                                this.logger.printWarning(this.getText("VERIFY_INPUT_PARAMS.INPUT_WARNING_TITLE", warningMessage));
                            }
                        }
                        _a.label = 4;
                    case 4:
                        this.logger.end();
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Check if there are questions to be prompted to the integrator
     */
    Ch5UpdateProjectCli.prototype.checkPromptQuestions = function () {
        return __awaiter(this, void 0, void 0, function () {
            var askConfirmation, questionsArray, _loop_1, this_1, i;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.logger.start("checkPromptQuestions");
                        if (!(this.inputArgs["config"].argsValue !== "")) return [3 /*break*/, 4];
                        askConfirmation = false;
                        if (!(this.inputArgs["force"].argsValue === true)) return [3 /*break*/, 1];
                        askConfirmation = true;
                        return [3 /*break*/, 3];
                    case 1:
                        questionsArray = {
                            name: this.getText("VALIDATIONS.CONFIRMATION.TITLE"),
                            message: this.getText("VALIDATIONS.CONFIRMATION.ARE_YOU_SURE_TO_CHANGE"),
                            initial: true
                        };
                        return [4 /*yield*/, new this.getConfirm(questionsArray).run().then(function (response) {
                                return response;
                            }).catch(function (err) {
                                throw new Error(_this.getText("ERRORS.DO_NOT_UPDATE_PROJECT"));
                            })];
                    case 2:
                        askConfirmation = _a.sent();
                        _a.label = 3;
                    case 3:
                        this.outputResponse.askConfirmation = this.utils.toBoolean(askConfirmation);
                        return [3 /*break*/, 9];
                    case 4:
                        _loop_1 = function (i) {
                            var choicesList, componentsQuery, _b, question, _c;
                            return __generator(this, function (_d) {
                                switch (_d.label) {
                                    case 0:
                                        if (!(this_1.outputResponse.data.updateInputs[i].inputReceived === true && !this_1.utils.isValidInput(this_1.outputResponse.data.updateInputs[i].argsValue))) return [3 /*break*/, 4];
                                        if (!(this_1.outputResponse.data.updateInputs[i].type === "enum" || this_1.outputResponse.data.updateInputs[i].type === "boolean")) return [3 /*break*/, 2];
                                        choicesList = this_1.outputResponse.data.updateInputs[i].allowedValues;
                                        componentsQuery = new this_1.getSelect({
                                            name: this_1.outputResponse.data.updateInputs[i].key,
                                            message: this_1.getText(this_1.outputResponse.data.updateInputs[i].question, this_1.outputResponse.data.updateInputs[i].key),
                                            choices: choicesList
                                        });
                                        _b = this_1.outputResponse.data.updateInputs[i];
                                        return [4 /*yield*/, componentsQuery.run()
                                                .then(function (selectedMenu) { return selectedMenu; })
                                                .catch(function (error) { throw new Error(_this.getText("ERRORS.DO_NOT_UPDATE_PROJECT")); })];
                                    case 1:
                                        _b.argsValue = _d.sent();
                                        if (this_1.outputResponse.data.updateInputs[i].type === "boolean") {
                                            this_1.outputResponse.data.updateInputs[i].argsValue = this_1.toBoolean(this_1.outputResponse.data.updateInputs[i].argsValue);
                                        }
                                        this_1.logger.log(this_1.outputResponse.data.updateInputs[i].key + ": ", this_1.outputResponse.data.updateInputs[i].argsValue);
                                        return [3 /*break*/, 4];
                                    case 2:
                                        if (!(this_1.outputResponse.data.updateInputs[i].type === "string")) return [3 /*break*/, 4];
                                        question = {
                                            name: this_1.outputResponse.data.updateInputs[i].key,
                                            message: this_1.getText(this_1.outputResponse.data.updateInputs[i].question, this_1.outputResponse.data.updateInputs[i].key),
                                            type: 'input'
                                        };
                                        _c = this_1.outputResponse.data.updateInputs[i];
                                        return [4 /*yield*/, this_1.getPrompt(question)
                                                .then(function (answer) {
                                                if (_this.outputResponse.data.updateInputs[i].key === "projectName") {
                                                    return answer[_this.outputResponse.data.updateInputs[i].key].toLowerCase();
                                                }
                                                else {
                                                    return answer[_this.outputResponse.data.updateInputs[i].key];
                                                }
                                            })
                                                .catch(function (error) { throw new Error(_this.getText("ERRORS.DO_NOT_UPDATE_PROJECT")); })];
                                    case 3:
                                        _c.argsValue = _d.sent();
                                        this_1.logger.log(this_1.outputResponse.data.updateInputs[i].key + ": ", this_1.outputResponse.data.updateInputs[i].argsValue);
                                        _d.label = 4;
                                    case 4: return [2 /*return*/];
                                }
                            });
                        };
                        this_1 = this;
                        i = 0;
                        _a.label = 5;
                    case 5:
                        if (!(i < this.outputResponse.data.updateInputs.length)) return [3 /*break*/, 8];
                        return [5 /*yield**/, _loop_1(i)];
                    case 6:
                        _a.sent();
                        _a.label = 7;
                    case 7:
                        i++;
                        return [3 /*break*/, 5];
                    case 8:
                        this.outputResponse.askConfirmation = true;
                        _a.label = 9;
                    case 9:
                        this.logger.end();
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Implement this component's main purpose
     */
    Ch5UpdateProjectCli.prototype.processRequest = function () {
        return __awaiter(this, void 0, void 0, function () {
            var folderNameForBackup, exportProject, oldProjectConfigJSON, newProjectConfigJSON, k, pagesToBeCreated, pagesToBeUpdated, pagesToBeDeleted, _loop_2, i, _loop_3, i, widgetsToBeCreated, widgetsToBeDeleted, widgetsToBeUpdated, _loop_4, i, _loop_5, i, i, delPage, i, genPage, newPageName, i, i, delWidget, i, genWidget, newWidgetName, i, i;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.logger.start("processRequest");
                        if (!(this.outputResponse.askConfirmation === true)) return [3 /*break*/, 21];
                        if (!(this.inputArgs["config"].argsValue !== "")) return [3 /*break*/, 19];
                        folderNameForBackup = this.getFolderName();
                        this.outputResponse.data.backupFolder = path.normalize(path.join(this.getConfigNode("backupFolder"), folderNameForBackup));
                        // Step 3: Take back up of existing json and project
                        fsExtra.copySync(this.inputArgs["config"].argsValue, path.join(this.getConfigNode("backupFolder"), folderNameForBackup, "project-config.json"));
                        exportProject = new Ch5ExportProjectCli_1.Ch5ExportProjectCli(false);
                        exportProject.changeConfigParam("zipFileDestinationPath", path.join(this.getConfigNode("backupFolder"), folderNameForBackup));
                        return [4 /*yield*/, exportProject.run()];
                    case 1:
                        _a.sent();
                        oldProjectConfigJSON = JSON.parse(this.utils.readFileContentSync(this.PROJECT_CONFIG_JSON_PATH));
                        newProjectConfigJSON = JSON.parse(this.utils.readFileContentSync(this.inputArgs["config"].argsValue));
                        // 1. Project Data
                        for (k in newProjectConfigJSON) {
                            if ((typeof newProjectConfigJSON[k] !== 'object' && newProjectConfigJSON[k] !== null)) {
                                if (oldProjectConfigJSON[k] !== newProjectConfigJSON[k]) {
                                    oldProjectConfigJSON[k] = newProjectConfigJSON[k];
                                    this.projectConfig.changeNodeValues(k, oldProjectConfigJSON[k]);
                                }
                            }
                        }
                        // 2. Themes
                        oldProjectConfigJSON["themes"] = newProjectConfigJSON["themes"];
                        this.projectConfig.changeNodeValues("themes", oldProjectConfigJSON["themes"]);
                        // 3. Config
                        oldProjectConfigJSON["config"] = newProjectConfigJSON["config"];
                        this.projectConfig.changeNodeValues("config", oldProjectConfigJSON["config"]);
                        // 4. Header
                        oldProjectConfigJSON["header"] = newProjectConfigJSON["header"];
                        this.projectConfig.changeNodeValues("header", oldProjectConfigJSON["header"]);
                        // 5. Footer
                        oldProjectConfigJSON["footer"] = newProjectConfigJSON["footer"];
                        this.projectConfig.changeNodeValues("footer", oldProjectConfigJSON["footer"]);
                        // 6. Content
                        oldProjectConfigJSON["content"]["$defaultView"] = newProjectConfigJSON["content"]["$defaultView"];
                        this.projectConfig.changeNodeValues("content.$defaultView", oldProjectConfigJSON["content"]["$defaultView"]);
                        oldProjectConfigJSON["content"]["triggerViewProperties"] = newProjectConfigJSON["content"]["triggerViewProperties"];
                        this.projectConfig.changeNodeValues("content.triggerViewProperties", oldProjectConfigJSON["content"]["triggerViewProperties"]);
                        pagesToBeCreated = [];
                        pagesToBeUpdated = [];
                        pagesToBeDeleted = [];
                        _loop_2 = function (i) {
                            var pageObj = oldProjectConfigJSON["content"]["pages"][i];
                            var pageInNewSet = newProjectConfigJSON["content"]["pages"].find(function (page) { return page.pageName.toString().toLowerCase() === pageObj.pageName.toString().toLowerCase(); });
                            if (pageInNewSet) {
                                pagesToBeUpdated.push(pageInNewSet);
                            }
                            else {
                                // Exists in Old set but not in new - so create page
                                pagesToBeDeleted.push(pageObj);
                            }
                        };
                        for (i = 0; i < oldProjectConfigJSON["content"]["pages"].length; i++) {
                            _loop_2(i);
                        }
                        _loop_3 = function (i) {
                            var pageObj = newProjectConfigJSON["content"]["pages"][i];
                            var pageInOldSet = oldProjectConfigJSON["content"]["pages"].find(function (page) { return page.pageName.toString().toLowerCase() === pageObj.pageName.toString().toLowerCase(); });
                            if (!pageInOldSet) {
                                // Exists in New set but not in old - so create page
                                pagesToBeCreated.push(pageObj);
                            }
                        };
                        for (i = 0; i < newProjectConfigJSON["content"]["pages"].length; i++) {
                            _loop_3(i);
                        }
                        widgetsToBeCreated = [];
                        widgetsToBeDeleted = [];
                        widgetsToBeUpdated = [];
                        _loop_4 = function (i) {
                            var widgetObj = oldProjectConfigJSON["content"]["widgets"][i];
                            var pageInNewSet = newProjectConfigJSON["content"]["widgets"].find(function (widget) { return widget.widgetName.toString().toLowerCase() === widgetObj.widgetName.toString().toLowerCase(); });
                            if (pageInNewSet) {
                                widgetsToBeUpdated.push(pageInNewSet);
                            }
                            else {
                                // Exists in Old set but not in new - so create page
                                widgetsToBeDeleted.push(widgetObj);
                            }
                        };
                        for (i = 0; i < oldProjectConfigJSON["content"]["widgets"].length; i++) {
                            _loop_4(i);
                        }
                        _loop_5 = function (i) {
                            var widgetObj = newProjectConfigJSON["content"]["widgets"][i];
                            var pageInOldSet = oldProjectConfigJSON["content"]["widgets"].find(function (widget) { return widget.widgetName.toString().toLowerCase() === widgetObj.widgetName.toString().toLowerCase(); });
                            if (!pageInOldSet) {
                                // Exists in New set but not in old - so create page
                                widgetsToBeCreated.push(widgetObj);
                            }
                        };
                        for (i = 0; i < newProjectConfigJSON["content"]["widgets"].length; i++) {
                            _loop_5(i);
                        }
                        i = 0;
                        _a.label = 2;
                    case 2:
                        if (!(i < pagesToBeDeleted.length)) return [3 /*break*/, 5];
                        delPage = new Ch5DeleteComponentsCli_1.Ch5DeleteComponentsCli(false);
                        delPage.setInputArgsForTesting(["--list", pagesToBeDeleted[i].pageName, "--force"]);
                        return [4 /*yield*/, delPage.run()];
                    case 3:
                        _a.sent();
                        _a.label = 4;
                    case 4:
                        i++;
                        return [3 /*break*/, 2];
                    case 5:
                        i = 0;
                        _a.label = 6;
                    case 6:
                        if (!(i < pagesToBeCreated.length)) return [3 /*break*/, 9];
                        genPage = new Ch5GeneratePageCli_1.Ch5GeneratePageCli(false);
                        newPageName = pagesToBeCreated[i].fileName.toLowerCase().split(".")[0];
                        genPage.setInputArgsForTesting(["-n", newPageName, "-m", pagesToBeCreated[i].navigation ? "Y" : "N"]);
                        return [4 /*yield*/, genPage.run()];
                    case 7:
                        _a.sent();
                        this.projectConfig.replacePageNodeInJSON(pagesToBeCreated[i]);
                        _a.label = 8;
                    case 8:
                        i++;
                        return [3 /*break*/, 6];
                    case 9:
                        for (i = 0; i < pagesToBeUpdated.length; i++) {
                            // Update in project-config
                            this.projectConfig.replacePageNodeInJSON(pagesToBeUpdated[i]);
                        }
                        i = 0;
                        _a.label = 10;
                    case 10:
                        if (!(i < widgetsToBeDeleted.length)) return [3 /*break*/, 13];
                        delWidget = new Ch5DeleteComponentsCli_1.Ch5DeleteComponentsCli(false);
                        delWidget.setInputArgsForTesting(["--list", widgetsToBeDeleted[i].widgetName, "--force"]);
                        return [4 /*yield*/, delWidget.run()];
                    case 11:
                        _a.sent();
                        _a.label = 12;
                    case 12:
                        i++;
                        return [3 /*break*/, 10];
                    case 13:
                        i = 0;
                        _a.label = 14;
                    case 14:
                        if (!(i < widgetsToBeCreated.length)) return [3 /*break*/, 17];
                        genWidget = new Ch5GenerateWidgetCli_1.Ch5GenerateWidgetCli(false);
                        newWidgetName = widgetsToBeCreated[i].fileName.toLowerCase().split(".")[0];
                        genWidget.setInputArgsForTesting(["-n", newWidgetName]);
                        return [4 /*yield*/, genWidget.run()];
                    case 15:
                        _a.sent();
                        this.projectConfig.removeWidgetFromJSON(widgetsToBeCreated[i]);
                        _a.label = 16;
                    case 16:
                        i++;
                        return [3 /*break*/, 14];
                    case 17:
                        for (i = 0; i < widgetsToBeUpdated.length; i++) {
                            // Update in project-config
                            this.projectConfig.replaceWidgetNodeInJSON(widgetsToBeUpdated[i]);
                        }
                        return [4 /*yield*/, this.isConfigFileValid(this.PROJECT_CONFIG_JSON_PATH, path.join(this.SHELL_FOLDER, this.VSCODE_SCHEMA_JSON_PATH))];
                    case 18:
                        // Step 6: Run validate:project-config
                        if (!(_a.sent())) {
                            throw new Error(this.getText("PROCESS_REQUEST.FAILURE_MESSAGE_INPUT_PARAM_CONFIG_FILE_INVALID"));
                        }
                        // Step 7: Show proper messages  
                        this.outputResponse.result = true;
                        this.outputResponse.successMessage = this.getText("LOG_OUTPUT.SUCCESS_MESSAGE_WITH_BACKUP", this.outputResponse.data.backupFolder);
                        return [3 /*break*/, 20];
                    case 19:
                        // Change project config
                        for (i = 0; i < this.outputResponse.data.updateInputs.length; i++) {
                            this.logger.log("Changed Values", this.outputResponse.data.updateInputs[i].key, this.outputResponse.data.updateInputs[i].argsValue);
                            this.projectConfig.changeNodeValues(this.outputResponse.data.updateInputs[i].key, this.outputResponse.data.updateInputs[i].argsValue);
                        }
                        this.outputResponse.result = true;
                        this.outputResponse.successMessage = this.getText("LOG_OUTPUT.SUCCESS_MESSAGE");
                        _a.label = 20;
                    case 20: return [3 /*break*/, 22];
                    case 21:
                        if (this.outputResponse.askConfirmation === false) {
                            throw new Error(this.getText("ERRORS.DO_NOT_UPDATE_PROJECT"));
                        }
                        else {
                            throw new Error(this.getText("ERRORS.PROGRAM_STOPPED_OR_UNKNOWN_ERROR"));
                        }
                        _a.label = 22;
                    case 22: return [2 /*return*/];
                }
            });
        });
    };
    Ch5UpdateProjectCli.prototype.getFolderName = function () {
        var currentDateTime = new Date();
        return String(currentDateTime.getFullYear()) + "-" + this.doubleDigit(currentDateTime.getMonth() + 1) + "-" + this.doubleDigit(currentDateTime.getDate()) + "-" + this.doubleDigit(currentDateTime.getHours()) + "-" + this.doubleDigit(currentDateTime.getMinutes()) + "-" + this.doubleDigit(currentDateTime.getSeconds());
    };
    Ch5UpdateProjectCli.prototype.doubleDigit = function (input) {
        if (input < 10) {
            return "0" + String(input);
        }
        return String(input);
    };
    /**
     * Clean up
     */
    Ch5UpdateProjectCli.prototype.cleanUp = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                if (this.inputArgs["config"].argsValue !== "") {
                    // Step 7: Clean up
                }
                return [2 /*return*/];
            });
        });
    };
    Ch5UpdateProjectCli.prototype.toBoolean = function (val, isEmptyValueEqualToTrue) {
        if (isEmptyValueEqualToTrue === void 0) { isEmptyValueEqualToTrue = false; }
        var str = String(val);
        switch (str.toLowerCase().trim()) {
            case "true":
            case "1": return true;
            case "false":
            case "0": return false;
            case "":
            case null:
            case undefined:
                if (isEmptyValueEqualToTrue === true) {
                    return true;
                }
                else {
                    return false;
                }
            default:
                return false;
        }
    };
    return Ch5UpdateProjectCli;
}(Ch5BaseClassForCliNew_1.Ch5BaseClassForCliNew));
exports.Ch5UpdateProjectCli = Ch5UpdateProjectCli;
